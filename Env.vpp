class Env


types

  public Mix :: classification : Cond`Var
                        tokens : int;

  public IntArray = map Cond`Var to int;
  public BoolArray = map Cond`Var to bool;
  public VarArray = map Cond`Var to Cond`Var;
  public RecArray = map Cond`Var to Mix;

  public Result = Mix | RecArray | IntArray | BoolArray | VarArray | <Indet>;


instance variables 

  denv : map Cond`Var to Result;

operations

  public Env: map Cond`Var to Result ==> Env
  Env(d) == denv := d;

  public GetDenv: () ==> map Cond`Var to Result
  GetDenv() ==
    return denv;

  public GetVal: Cond`Var ==> Result
  GetVal(var) ==
    return denv(var);
  
  public GetDom : () ==> set of Cond`Var
  GetDom() == return dom denv;

  public GetAgents : () ==> Cond`Var
  GetAgents() == (dcl agents : seq of Cond`Var := []; for all x in set dom denv do agents := agents ^ [x]; return agents(2););

  public GetDocs : () ==> Cond`Var
  GetDocs() ==  (dcl docs : seq of Cond`Var := []; for all x in set dom denv do docs := docs ^ [x]; return docs(1););

  public setBalance : Cond`Var * int ==> ()
  setBalance(person,balance) == let people = self.GetAgents() in ( denv(people) := denv(people) ++ {person |-> balance} );
  
  public getMixAgents : () ==> Cond`Var
  getMixAgents() == (dcl agents : seq of Cond`Var := []; for all x in set dom denv do agents := agents ^ [x]; return agents(3););
  
  public getMixDocs : () ==> Cond`Var
  getMixDocs() ==  (dcl docs : seq of Cond`Var := []; for all x in set dom denv do docs := docs ^ [x]; return docs(2););
  
  public getMixClearance : () ==> Cond`Var
  getMixClearance() == (dcl clearance : seq of Cond`Var := []; for all x in set dom denv do clearance := clearance ^ [x]; return clearance(1););
  
  public setMixBalance : Cond`Var * Cond`Var * int ==> ()
  setMixBalance(person,clearance,balance) == let people = self.getMixAgents() in ( denv(people) := denv(people) ++ {person |-> mk_Mix(clearance,balance)} );

end Env
